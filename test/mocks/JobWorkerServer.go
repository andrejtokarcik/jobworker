// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/andrejtokarcik/jobworker/proto"
	mock "github.com/stretchr/testify/mock"
)

// JobWorkerServer is an autogenerated mock type for the JobWorkerServer type
type JobWorkerServer struct {
	mock.Mock
}

// GetJob provides a mock function with given fields: _a0, _a1
func (_m *JobWorkerServer) GetJob(_a0 context.Context, _a1 *proto.GetJobRequest) (*proto.GetJobResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.GetJobResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.GetJobRequest) *proto.GetJobResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.GetJobResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.GetJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartJob provides a mock function with given fields: _a0, _a1
func (_m *JobWorkerServer) StartJob(_a0 context.Context, _a1 *proto.StartJobRequest) (*proto.StartJobResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.StartJobResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StartJobRequest) *proto.StartJobResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StartJobResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.StartJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: _a0, _a1
func (_m *JobWorkerServer) StopJob(_a0 context.Context, _a1 *proto.StopJobRequest) (*proto.StopJobResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.StopJobResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.StopJobRequest) *proto.StopJobResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StopJobResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.StopJobRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
