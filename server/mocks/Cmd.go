// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	cmd "github.com/go-cmd/cmd"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/andrejtokarcik/jobworker/proto"
)

// Cmd is an autogenerated mock type for the Cmd type
type Cmd struct {
	mock.Mock
}

// Spec provides a mock function with given fields:
func (_m *Cmd) Spec() *proto.CommandSpec {
	ret := _m.Called()

	var r0 *proto.CommandSpec
	if rf, ok := ret.Get(0).(func() *proto.CommandSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.CommandSpec)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Cmd) Start() <-chan cmd.Status {
	ret := _m.Called()

	var r0 <-chan cmd.Status
	if rf, ok := ret.Get(0).(func() <-chan cmd.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan cmd.Status)
		}
	}

	return r0
}

// State provides a mock function with given fields:
func (_m *Cmd) State() proto.GetJobResponse_State {
	ret := _m.Called()

	var r0 proto.GetJobResponse_State
	if rf, ok := ret.Get(0).(func() proto.GetJobResponse_State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(proto.GetJobResponse_State)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Cmd) Status() cmd.Status {
	ret := _m.Called()

	var r0 cmd.Status
	if rf, ok := ret.Get(0).(func() cmd.Status); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cmd.Status)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Cmd) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
