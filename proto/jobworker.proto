syntax = "proto3";

package jobworker;
option go_package = "proto";

import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service JobWorker {
  rpc StartJob(StartJobRequest) returns (StartJobResponse);
  rpc StopJob(StopJobRequest) returns (StopJobResponse);
  rpc GetJob(GetJobRequest) returns (GetJobResponse);
  // ListJobs returns a list of jobs started by the caller.
  rpc ListJobs(ListJobsRequest) returns (ListJobsResponse);
}

message CommandSpec {
  string command = 1;
  repeated string args = 2;
  repeated string env = 3;
  string dir = 4;
}

message StartJobRequest {
  CommandSpec command = 1;
}

message StartJobResponse {
  // JobUUID specifies the job's UUID in its standard hexadecimal
  // representation.
  string job_uuid = 1 [
    (gogoproto.customname) = "JobUUID"
  ];
}

message StopJobRequest {
  string job_uuid = 1 [
    (gogoproto.customname) = "JobUUID"
  ];
}

message StopJobResponse {}

message GetJobRequest {
  string job_uuid = 1 [
    (gogoproto.customname) = "JobUUID"
  ];
  bool with_logs = 2;
}

message GetJobResponse {
  CommandSpec command = 1;

  enum State {
    UNKNOWN = 0;
    RUNNING = 1;
    COMPLETED = 2;
    STOPPED = 3;
    // The command either failed to start (it never ran) or it started
    // but was terminated unexpectedly (probably signaled)
    FAILED = 4;
    // The command has not started yet
    PENDING = 5;
  };
  State state = 2;
  // StateDetails provides additional details about the job's state.
  string state_details = 3;

  int32 exit_code = 4;

  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp ended_at = 6;

  // proc(5): "On 64-bit systems, pid_max can be set to any value up to 2^22"
  uint32 pid = 7 [
    (gogoproto.customname) = "PID"
  ];

  // Populated only if with_logs set to true
  repeated string stdout = 8;
  repeated string stderr = 9;

}

message ListJobsRequest {}

message ListJobsResponse {
  repeated string job_uuids = 1 [
    (gogoproto.customname) = "JobUUIDs"
  ];
}
